# -*- python -*-
# ex: set syntax=python:

import os
import re
import subprocess
import ConfigParser

from buildbot import locks

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

ini = ConfigParser.ConfigParser()
ini.read("./config.ini")

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = ini.get("general", "title")
c['titleURL'] = ini.get("general", "title_url")

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = ini.get("general", "buildbot_url")

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave

slave_port = 9989

if ini.has_option("general", "port"):
	slave_port = ini.getint("general", "port")

c['slaves'] = []
max_builds = dict()
do_cleanup = dict()
NetLocks = dict()

for section in ini.sections():
	if section.startswith("slave "):
		if ini.has_option(section, "name") and ini.has_option(section, "password"):
			sl_props = { 'dl_lock':None, 'ul_lock':None, }
			name = ini.get(section, "name")
			password = ini.get(section, "password")
			max_builds[name] = 1
			do_cleanup[name] = False
			if ini.has_option(section, "builds"):
				max_builds[name] = ini.getint(section, "builds")
			if ini.has_option(section, "cleanup"):
				do_cleanup[name] = ini.getboolean(section, "cleanup")
			if ini.has_option(section, "dl_lock"):
				lockname = ini.get(section, "dl_lock")
				sl_props['dl_lock'] = lockname
				if lockname not in NetLocks:
					NetLocks[lockname] = locks.MasterLock(lockname)
			if ini.has_option(section, "ul_lock"):
				lockname = ini.get(section, "dl_lock")
				sl_props['ul_lock'] = lockname
				if lockname not in NetLocks:
					NetLocks[lockname] = locks.MasterLock(lockname)
			c['slaves'].append(BuildSlave(name, password, max_builds = max_builds[name], properties = sl_props))

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = slave_port

# coalesce builds
c['mergeRequests'] = True

# Reduce amount of backlog data
c['buildHorizon'] = 30
c['logHorizon'] = 20

####### CHANGESOURCES

home_dir = os.path.abspath(ini.get("general", "homedir"))
tree_expire = 0
other_builds = 0
cc_version = None

cc_command = "gcc"
cxx_command = "g++"

if ini.has_option("general", "expire"):
	tree_expire = ini.getint("general", "expire")

if ini.has_option("general", "other_builds"):
	other_builds = ini.getint("general", "other_builds")

if ini.has_option("general", "cc_version"):
	cc_version = ini.get("general", "cc_version").split()
	if len(cc_version) == 1:
		cc_version = ["eq", cc_version[0]]

repo_url = ini.get("repo", "url")
repo_branch = "master"

if ini.has_option("repo", "branch"):
	repo_branch = ini.get("repo", "branch")

rsync_bin_url = ini.get("rsync", "binary_url")
rsync_bin_key = ini.get("rsync", "binary_password")

rsync_src_url = None
rsync_src_key = None

if ini.has_option("rsync", "source_url"):
	rsync_src_url = ini.get("rsync", "source_url")
	rsync_src_key = ini.get("rsync", "source_password")

gpg_home = "~/.gnupg"
gpg_keyid = None
gpg_comment = "Unattended build signature"
gpg_passfile = "/dev/null"

if ini.has_option("gpg", "home"):
	gpg_home = ini.get("gpg", "home")

if ini.has_option("gpg", "keyid"):
	gpg_keyid = ini.get("gpg", "keyid")

if ini.has_option("gpg", "comment"):
	gpg_comment = ini.get("gpg", "comment")

if ini.has_option("gpg", "passfile"):
	gpg_passfile = ini.get("gpg", "passfile")

enable_kmod_archive = True


# find targets
targets = [ ]

if not os.path.isdir(home_dir+'/source.git'):
	subprocess.call(["git", "clone", "--depth=1", "--branch="+repo_branch, repo_url, home_dir+'/source.git'])
else:
	subprocess.call(["git", "pull"], cwd = home_dir+'/source.git')

findtargets = subprocess.Popen([home_dir+'/dumpinfo.pl', 'targets'],
	stdout = subprocess.PIPE, cwd = home_dir+'/source.git')

while True:
	line = findtargets.stdout.readline()
	if not line:
		break
	ta = line.strip().split(' ')
	targets.append(ta[0])


# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
	repo_url,
	workdir=home_dir+'/work.git', branch=repo_branch,
	pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'basebuild' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
	name="all",
	change_filter=filter.ChangeFilter(branch=repo_branch),
	treeStableTimer=60,
	builderNames=targets))

c['schedulers'].append(ForceScheduler(
	name="force",
	builderNames=targets))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import SetProperty
from buildbot.steps.transfer import FileUpload
from buildbot.steps.transfer import FileDownload
from buildbot.steps.master import MasterShellCommand
from buildbot.process.properties import WithProperties
from buildbot.process import properties


CleanTargetMap = [
	[ "tools",	"tools/clean"			],
	[ "chain",	"toolchain/clean"		],
	[ "linux",	"target/linux/clean"	],
	[ "dir",	"dirclean"				],
	[ "dist",	"distclean"				]
]

def IsMakeCleanRequested(pattern):
	def CheckCleanProperty(step):
		val = step.getProperty("clean")
		if val and re.match(pattern, val):
			return True
		else:
			return False

	return CheckCleanProperty

def IsCleanupRequested(step):
	val = step.getProperty("slavename")
	if val and do_cleanup[val]:
		return True
	else:
		return False

def IsTaggingRequested(step):
	val = step.getProperty("tag")
	if val and re.match("^[0-9]+\.[0-9]+\.[0-9]+(?:-rc[0-9]+)?$", val):
		return True
	else:
		return False

def IsNoTaggingRequested(step):
	return not IsTaggingRequested(step)

def IsNoMasterBuild(step):
	return repo_branch != "master"

def IsCleanupConfigured(step):
	slave = step.getProperty("slavename")
	if slave and slave in do_cleanup:
		return do_cleanup[slave] > 0
	else:
		return False

def GetBaseVersion(props):
	if re.match("^[^-]+-[0-9]+\.[0-9]+$", repo_branch):
		return repo_branch.split('-')[1]
	else:
		return "master"

def GetVersionPrefix(props):
	basever = GetBaseVersion(props)
	if props.hasProperty("tag") and re.match("^[0-9]+\.[0-9]+\.[0-9]+(?:-rc[0-9]+)?$", props["tag"]):
		return "%s/" % props["tag"]
	elif basever != "master":
		return "%s-SNAPSHOT/" % basever
	else:
		return ""

def GetNumJobs(props):
	if props.hasProperty("slavename") and props.hasProperty("nproc"):
		return (int(props["nproc"]) / (max_builds[props["slavename"]] + other_builds))
	else:
		return 1

def GetCC(props):
	if props.hasProperty("cc_command"):
		return props["cc_command"]
	else:
		return "gcc"

def GetCXX(props):
	if props.hasProperty("cxx_command"):
		return props["cxx_command"]
	else:
		return "g++"

def GetCwd(props):
	if props.hasProperty("builddir"):
		return props["builddir"]
	elif props.hasProperty("workdir"):
		return props["workdir"]
	else:
		return "/"

def GetNextBuild(builder, requests):
	for r in requests:
		if r.properties and r.properties.hasProperty("tag"):
			return r
	return requests[0]

def MakeEnv(overrides=None):
	env = {
		'CC': WithProperties("%(cc)s", cc=GetCC),
		'CXX': WithProperties("%(cxx)s", cxx=GetCXX),
		'CCACHE_BASEDIR': WithProperties("%(cwd)s", cwd=GetCwd)
	}
	if overrides is not None:
		env.update(overrides)
	return env

@properties.renderer
def NetLockDl(props):
	lock = None
	if props.hasProperty("dl_lock"):
		lock = NetLocks[props["dl_lock"]]
	if lock is not None:
		return [lock.access('exclusive')]
	else:
		return []

@properties.renderer
def NetLockUl(props):
	lock = None
	if props.hasProperty("ul_lock"):
		lock = NetLocks[props["ul_lock"]]
	if lock is not None:
		return [lock.access('exclusive')]
	else:
		return []

c['builders'] = []

dlLock = locks.SlaveLock("slave_dl")

checkBuiltin = re.sub('[\t\n ]+', ' ', """
	checkBuiltin() {
		local symbol op path file;
		for file in $CHANGED_FILES; do
			case "$file" in
				package/*/*) : ;;
				*) return 0 ;;
			esac;
		done;
		while read symbol op path; do
			case "$symbol" in package-*)
				symbol="${symbol##*(}";
				symbol="${symbol%)}";
				for file in $CHANGED_FILES; do
					case "$file" in "package/$path/"*)
						grep -qsx "$symbol=y" .config && return 0
					;; esac;
				done;
			esac;
		done < tmp/.packagedeps;
		return 1;
	}
""").strip()


class IfBuiltinShellCommand(ShellCommand):
	def _quote(self, str):
		if re.search("[^a-zA-Z0-9/_.-]", str):
			return "'%s'" %(re.sub("'", "'\"'\"'", str))
		return str

	def setCommand(self, command):
		if not isinstance(command, (str, unicode)):
			command = ' '.join(map(self._quote, command))
		self.command = [
			'/bin/sh', '-c',
			'%s; if checkBuiltin; then %s; else exit 0; fi' %(checkBuiltin, command)
		]

	def setupEnvironment(self, cmd):
		slaveEnv = self.slaveEnvironment
		if slaveEnv is None:
			slaveEnv = { }
		changedFiles = { }
		for request in self.build.requests:
			for source in request.sources:
				for change in source.changes:
					for file in change.files:
						changedFiles[file] = True
		fullSlaveEnv = slaveEnv.copy()
		fullSlaveEnv['CHANGED_FILES'] = ' '.join(changedFiles.keys())
		cmd.args['env'] = fullSlaveEnv

slaveNames = [ ]

for slave in c['slaves']:
	slaveNames.append(slave.slavename)

for target in targets:
	ts = target.split('/')

	factory = BuildFactory()

	# find number of cores
	factory.addStep(SetProperty(
		name = "nproc",
		property = "nproc",
		description = "Finding number of CPUs",
		command = ["nproc"]))

	# find gcc and g++ compilers
	if cc_version is not None:
		factory.addStep(FileDownload(
			mastersrc = "findbin.pl",
			slavedest = "../findbin.pl",
			mode = 0755))

		factory.addStep(SetProperty(
			name = "gcc",
			property = "cc_command",
			description = "Finding gcc command",
			command = ["../findbin.pl", "gcc", cc_version[0], cc_version[1]],
			haltOnFailure = True))

		factory.addStep(SetProperty(
			name = "g++",
			property = "cxx_command",
			description = "Finding g++ command",
			command = ["../findbin.pl", "g++", cc_version[0], cc_version[1]],
			haltOnFailure = True))

	# expire tree if needed
	if tree_expire > 0:
		factory.addStep(FileDownload(
			mastersrc = "expire.sh",
			slavedest = "../expire.sh",
			mode = 0755))

		factory.addStep(ShellCommand(
			name = "expire",
			description = "Checking for build tree expiry",
			command = ["./expire.sh", str(tree_expire)],
			workdir = ".",
			haltOnFailure = True,
			timeout = 2400))

	# cleanup.sh if needed
	factory.addStep(FileDownload(
		mastersrc = "cleanup.sh",
		slavedest = "../cleanup.sh",
		mode = 0755,
		doStepIf = IsCleanupRequested))

	factory.addStep(ShellCommand(
		name = "cleanold",
		description = "Cleaning previous builds",
		command = ["./cleanup.sh", c['buildbotURL'], WithProperties("%(slavename)s"), WithProperties("%(buildername)s"), "full"],
		workdir = ".",
		haltOnFailure = True,
		doStepIf = IsCleanupRequested,
		timeout = 2400))

	factory.addStep(ShellCommand(
		name = "cleanup",
		description = "Cleaning work area",
		command = ["./cleanup.sh", c['buildbotURL'], WithProperties("%(slavename)s"), WithProperties("%(buildername)s"), "single"],
		workdir = ".",
		haltOnFailure = True,
		doStepIf = IsCleanupRequested,
		timeout = 2400))

	# user-requested clean targets
	for tuple in CleanTargetMap:
		factory.addStep(ShellCommand(
			name = tuple[1],
			description = 'User-requested "make %s"' % tuple[1],
			command = ["make", tuple[1], "V=s"],
			env = MakeEnv(),
			doStepIf = IsMakeCleanRequested(tuple[0])
		))

	# switch to branch
	factory.addStep(ShellCommand(
		name = "switchbranch",
		description = "Checking out Git branch",
		command = "if [ -d .git ]; then git fetch && git checkout '%s'; else exit 0; fi" % repo_branch,
		haltOnFailure = True,
		doStepIf = IsNoTaggingRequested,
		locks = NetLockDl,
	))

	# check out the source
	factory.addStep(Git(
		repourl = repo_url,
		branch = repo_branch,
		mode = 'incremental',
		method = 'clean',
		locks = NetLockDl,
	))

	# update remote refs
	factory.addStep(ShellCommand(
		name = "fetchrefs",
		description = "Fetching Git remote refs",
		command = ["git", "fetch", "origin", "+refs/heads/%s:refs/remotes/origin/%s" %(repo_branch, repo_branch)],
		haltOnFailure = True
	))

	# fetch tags
	factory.addStep(ShellCommand(
		name = "fetchtag",
		description = "Fetching Git tags",
		command = ["git", "fetch", "--tags", "--", repo_url],
		haltOnFailure = True,
		doStepIf = IsTaggingRequested,
		locks = NetLockDl,
	))

	# switch to tag
	factory.addStep(ShellCommand(
		name = "switchtag",
		description = "Checking out Git tag",
		command = ["git", "checkout", WithProperties("tags/v%(tag:-)s")],
		haltOnFailure = True,
		doStepIf = IsTaggingRequested
	))

	factory.addStep(ShellCommand(
		name = "rmtmp",
		description = "Remove tmp folder",
		command=["rm", "-rf", "tmp/"]))

	# feed
#	factory.addStep(ShellCommand(
#		name = "feedsconf",
#		description = "Copy the feeds.conf",
#		command='''cp ~/feeds.conf ./feeds.conf''' ))

	# feed
	factory.addStep(ShellCommand(
		name = "rmfeedlinks",
		description = "Remove feed symlinks",
		command=["rm", "-rf", "package/feeds/"]))

	# feed
	factory.addStep(ShellCommand(
		name = "updatefeeds",
		description = "Updating feeds",
		command=["./scripts/feeds", "update"],
		env = MakeEnv(),
		locks = NetLockDl,
	))

	# feed
	factory.addStep(ShellCommand(
		name = "installfeeds",
		description = "Installing feeds",
		command=["./scripts/feeds", "install", "-a"],
		env = MakeEnv()))

	# seed config
	factory.addStep(FileDownload(
		mastersrc = "config.seed",
		slavedest = ".config",
		mode = 0644
	))

	# configure
	factory.addStep(ShellCommand(
		name = "newconfig",
		description = "Seeding .config",
		command = "printf 'CONFIG_TARGET_%s=y\\nCONFIG_TARGET_%s_%s=y\\n' >> .config" %(ts[0], ts[0], ts[1])
	))

	factory.addStep(ShellCommand(
		name = "delbin",
		description = "Removing output directory",
		command = ["rm", "-rf", "bin/"]
	))

	factory.addStep(ShellCommand(
		name = "defconfig",
		description = "Populating .config",
		command = ["make", "defconfig"],
		env = MakeEnv()
	))

	# check arch
	factory.addStep(ShellCommand(
		name = "checkarch",
		description = "Checking architecture",
		command = ["grep", "-sq", "CONFIG_TARGET_%s=y" %(ts[0]), ".config"],
		logEnviron = False,
		want_stdout = False,
		want_stderr = False,
		haltOnFailure = True
	))

	# find libc suffix
	factory.addStep(SetProperty(
		name = "libc",
		property = "libc",
		description = "Finding libc suffix",
		command = ["sed", "-ne", '/^CONFIG_LIBC=/ { s!^CONFIG_LIBC="\\(.*\\)"!\\1!; s!^musl$!!; s!.\\+!-&!p }', ".config"]))

	# ccache helper
	factory.addStep(FileDownload(
		mastersrc = "ccache.sh",
		slavedest = "ccache.sh",
		mode = 0755
	))

	# ccache prepare
	factory.addStep(ShellCommand(
                name = "prepccache",
                description = "Preparing ccache",
                command = ["./ccache.sh"]
	))

	# install build key
	factory.addStep(FileDownload(mastersrc=home_dir+'/key-build', slavedest="key-build", mode=0600))
	factory.addStep(FileDownload(mastersrc=home_dir+'/key-build.pub', slavedest="key-build.pub", mode=0600))

	# prepare dl
	factory.addStep(ShellCommand(
		name = "dldir",
		description = "Preparing dl/",
		command = "mkdir -p $HOME/dl && rm -rf ./dl && ln -sf $HOME/dl ./dl",
		logEnviron = False,
		want_stdout = False
	))

	# prepare tar
	factory.addStep(ShellCommand(
		name = "dltar",
		description = "Building and installing GNU tar",
		command = ["make", WithProperties("-j%(jobs)d", jobs=GetNumJobs), "tools/tar/compile", "V=s"],
		env = MakeEnv(),
		haltOnFailure = True
	))

	# populate dl
	factory.addStep(ShellCommand(
		name = "dlrun",
		description = "Populating dl/",
		command = ["make", WithProperties("-j%(jobs)d", jobs=GetNumJobs), "download", "V=s"],
		env = MakeEnv(),
		logEnviron = False,
		locks = properties.FlattenList(NetLockDl, [dlLock.access('exclusive')]),
	))

	factory.addStep(ShellCommand(
		name = "cleanbase",
		description = "Cleaning base-files",
		command=["make", "package/base-files/clean", "V=s"]
	))

	# build
	factory.addStep(ShellCommand(
		name = "tools",
		description = "Building and installing tools",
		command = ["make", WithProperties("-j%(jobs)d", jobs=GetNumJobs), "tools/install", "V=s"],
		env = MakeEnv(),
		haltOnFailure = True
	))

	factory.addStep(ShellCommand(
		name = "toolchain",
		description = "Building and installing toolchain",
		command=["make", WithProperties("-j%(jobs)d", jobs=GetNumJobs), "toolchain/install", "V=s"],
		env = MakeEnv(),
		haltOnFailure = True
	))

	factory.addStep(ShellCommand(
		name = "kmods",
		description = "Building kmods",
		command=["make", WithProperties("-j%(jobs)d", jobs=GetNumJobs), "target/compile", "V=s", "IGNORE_ERRORS=n m", "BUILD_LOG=1"],
		env = MakeEnv(),
		#env={'BUILD_LOG_DIR': 'bin/%s' %(ts[0])},
		haltOnFailure = True
	))

	# find kernel version
	factory.addStep(SetProperty(
		name = "kernelversion",
		property = "kernelversion",
		description = "Finding the effective Kernel version",
		command = "make --no-print-directory -C target/linux/ val.LINUX_VERSION val.LINUX_RELEASE val.LINUX_VERMAGIC | xargs printf '%s-%s-%s\\n'",
		env = { 'TOPDIR': WithProperties("%(cwd)s/build", cwd=GetCwd) }
	))

	factory.addStep(ShellCommand(
		name = "pkgclean",
		description = "Cleaning up package build",
		command=["make", "package/cleanup", "V=s"]
	))

	factory.addStep(ShellCommand(
		name = "pkgbuild",
		description = "Building packages",
		command=["make", WithProperties("-j%(jobs)d", jobs=GetNumJobs), "package/compile", "V=s", "IGNORE_ERRORS=n m", "BUILD_LOG=1"],
		env = MakeEnv(),
		#env={'BUILD_LOG_DIR': 'bin/%s' %(ts[0])},
		haltOnFailure = True
	))

	# factory.addStep(IfBuiltinShellCommand(
	factory.addStep(ShellCommand(
		name = "pkginstall",
		description = "Installing packages",
		command=["make", WithProperties("-j%(jobs)d", jobs=GetNumJobs), "package/install", "V=s"],
		env = MakeEnv(),
		haltOnFailure = True
	))

	factory.addStep(ShellCommand(
		name = "pkgindex",
		description = "Indexing packages",
		command=["make", WithProperties("-j%(jobs)d", jobs=GetNumJobs), "package/index", "V=s"],
		env = MakeEnv(),
		haltOnFailure = True
	))

	if enable_kmod_archive:
		factory.addStep(ShellCommand(
			name = "kmoddir",
			description = "Creating kmod directory",
			command=["mkdir", "-p", WithProperties("bin/targets/%s/%s%%(libc)s/kmods/%%(kernelversion)s" %(ts[0], ts[1]))],
			haltOnFailure = True
		))

		factory.addStep(ShellCommand(
			name = "kmodprepare",
			description = "Preparing kmod archive",
			command=["rsync", "--include=/kmod-*.ipk", "--exclude=*", "-va",
			         WithProperties("bin/targets/%s/%s%%(libc)s/packages/" %(ts[0], ts[1])),
			         WithProperties("bin/targets/%s/%s%%(libc)s/kmods/%%(kernelversion)s/" %(ts[0], ts[1]))],
			haltOnFailure = True
		))

		factory.addStep(ShellCommand(
			name = "kmodindex",
			description = "Indexing kmod archive",
			command=["make", WithProperties("-j%(jobs)d", jobs=GetNumJobs), "package/index", "V=s",
			         WithProperties("PACKAGE_SUBDIRS=bin/targets/%s/%s%%(libc)s/kmods/%%(kernelversion)s/" %(ts[0], ts[1]))],
			env = MakeEnv(),
			haltOnFailure = True
		))

		# find rootfs staging directory
		factory.addStep(SetProperty(
			name = "stageroot",
			property = "stageroot",
			description = "Finding the rootfs staging directory",
			command=["make", "--no-print-directory", "val.STAGING_DIR_ROOT"],
			env = { 'TOPDIR': WithProperties("%(cwd)s/build", cwd=GetCwd) }
		))

		factory.addStep(ShellCommand(
			name = "filesdir",
			description = "Creating file overlay directory",
			command=["mkdir", "-p", "files/etc/opkg"],
			haltOnFailure = True
		))

		factory.addStep(ShellCommand(
			name = "kmodconfig",
			description = "Embedding kmod repository configuration",
			command=WithProperties("sed -e 's#^\\(src/gz .*\\)_core \\(.*\\)/packages$#&\\n\\1_kmods \\2/kmods/%(kernelversion)s#' " +
			                       "%(stageroot)s/etc/opkg/distfeeds.conf > files/etc/opkg/distfeeds.conf"),
			haltOnFailure = True
		))

	#factory.addStep(IfBuiltinShellCommand(
	factory.addStep(ShellCommand(
		name = "images",
		description = "Building and installing images",
		command=["make", WithProperties("-j%(jobs)d", jobs=GetNumJobs), "target/install", "V=s"],
		env = MakeEnv(),
		haltOnFailure = True
	))

	factory.addStep(ShellCommand(
		name = "diffconfig",
		description = "Generating config.seed",
		command=["make", "-j1", "diffconfig", "V=s"],
		env = MakeEnv(),
		haltOnFailure = True
	))

	factory.addStep(ShellCommand(
		name = "checksums",
		description = "Calculating checksums",
		command=["make", "-j1", "checksum", "V=s"],
		env = MakeEnv(),
		haltOnFailure = True
	))

	# sign
	if gpg_keyid is not None:
		factory.addStep(MasterShellCommand(
			name = "signprepare",
			description = "Preparing temporary signing directory",
			command = ["mkdir", "-p", "%s/signing" %(home_dir)],
			haltOnFailure = True
		))

		factory.addStep(ShellCommand(
			name = "signpack",
			description = "Packing files to sign",
			command = WithProperties("find bin/targets/%s/%s%%(libc)s/ bin/targets/%s/%s%%(libc)s/kmods/ -mindepth 1 -maxdepth 2 -type f -name sha256sums -print0 -or -name Packages -print0 | xargs -0 tar -czf sign.tar.gz" %(ts[0], ts[1], ts[0], ts[1])),
			haltOnFailure = True
		))

		factory.addStep(FileUpload(
			slavesrc = "sign.tar.gz",
			masterdest = "%s/signing/%s.%s.tar.gz" %(home_dir, ts[0], ts[1]),
			haltOnFailure = True
		))

		factory.addStep(MasterShellCommand(
			name = "signfiles",
			description = "Signing files",
			command = ["%s/signall.sh" %(home_dir), "%s/signing/%s.%s.tar.gz" %(home_dir, ts[0], ts[1]), gpg_keyid, gpg_comment],
			env = {'GNUPGHOME': gpg_home, 'PASSFILE': gpg_passfile},
			haltOnFailure = True
		))

		factory.addStep(FileDownload(
			mastersrc = "%s/signing/%s.%s.tar.gz" %(home_dir, ts[0], ts[1]),
			slavedest = "sign.tar.gz",
			haltOnFailure = True
		))

		factory.addStep(ShellCommand(
			name = "signunpack",
			description = "Unpacking signed files",
			command = ["tar", "-xzf", "sign.tar.gz"],
			haltOnFailure = True
		))

	# upload
	factory.addStep(ShellCommand(
		name = "dirprepare",
		description = "Preparing upload directory structure",
		command = ["mkdir", "-p", WithProperties("tmp/upload/%%(prefix)stargets/%s/%s" %(ts[0], ts[1]), prefix=GetVersionPrefix)],
		haltOnFailure = True
	))

	factory.addStep(ShellCommand(
		name = "linkprepare",
		description = "Preparing repository symlink",
		command = ["ln", "-s", "-f", WithProperties("../packages-%(basever)s", basever=GetBaseVersion), WithProperties("tmp/upload/%(prefix)spackages", prefix=GetVersionPrefix)],
		doStepIf = IsNoMasterBuild,
		haltOnFailure = True
	))

	if enable_kmod_archive:
		factory.addStep(ShellCommand(
			name = "kmoddirprepare",
			description = "Preparing kmod archive upload directory",
			command = ["mkdir", "-p", WithProperties("tmp/upload/%%(prefix)stargets/%s/%s/kmods/%%(kernelversion)s" %(ts[0], ts[1]), prefix=GetVersionPrefix)],
			haltOnFailure = True
		))

	factory.addStep(ShellCommand(
		name = "dirupload",
		description = "Uploading directory structure",
		command = ["rsync", "-4", "--info=name", "-az", "tmp/upload/", "%s/" %(rsync_bin_url)],
		env={'RSYNC_PASSWORD': rsync_bin_key},
		haltOnFailure = True,
		logEnviron = False,
		locks = NetLockUl,
	))

	factory.addStep(FileDownload(
			mastersrc = "rsync.sh",
			slavedest = "../rsync.sh",
			mode = 0755))

	factory.addStep(ShellCommand(
		name = "targetupload",
		description = "Uploading target files",
		command=["../rsync.sh", "-4", "--info=name", "--exclude=/kmods/", "--delete", "--size-only", "--delay-updates", "--partial-dir=.~tmp~%s~%s" %(ts[0], ts[1]),
		         "-a", WithProperties("bin/targets/%s/%s%%(libc)s/" %(ts[0], ts[1])),
		         WithProperties("%s/%%(prefix)stargets/%s/%s/" %(rsync_bin_url, ts[0], ts[1]), prefix=GetVersionPrefix)],
		env={'RSYNC_PASSWORD': rsync_bin_key},
		haltOnFailure = True,
		logEnviron = False,
		locks = NetLockUl,
	))

	if enable_kmod_archive:
		factory.addStep(ShellCommand(
			name = "kmodupload",
			description = "Uploading kmod archive",
			command=["../rsync.sh", "-4", "--info=name", "--delete", "--size-only", "--delay-updates", "--partial-dir=.~tmp~%s~%s" %(ts[0], ts[1]),
			         "-a", WithProperties("bin/targets/%s/%s%%(libc)s/kmods/%%(kernelversion)s/" %(ts[0], ts[1])),
			         WithProperties("%s/%%(prefix)stargets/%s/%s/kmods/%%(kernelversion)s/" %(rsync_bin_url, ts[0], ts[1]), prefix=GetVersionPrefix)],
			env={'RSYNC_PASSWORD': rsync_bin_key},
			haltOnFailure = True,
			logEnviron = False,
			locks = NetLockUl,
		))

	if rsync_src_url is not None:
		factory.addStep(ShellCommand(
			name = "sourceupload",
			description = "Uploading source archives",
			command=["../rsync.sh", "-4", "--info=name", "--size-only", "--delay-updates",
			         WithProperties("--partial-dir=.~tmp~%s~%s~%%(slavename)s" %(ts[0], ts[1])), "-a", "dl/", "%s/" %(rsync_src_url)],
			env={'RSYNC_PASSWORD': rsync_src_key},
			haltOnFailure = True,
			logEnviron = False,
			locks = NetLockUl,
		))

	if False:
		factory.addStep(ShellCommand(
			name = "packageupload",
			description = "Uploading package files",
			command=["../rsync.sh", "-4", "--info=name", "--delete", "--delay-updates", "--partial-dir=.~tmp~%s~%s" %(ts[0], ts[1]), "-a", "bin/packages/", "%s/packages/" %(rsync_bin_url)],
			env={'RSYNC_PASSWORD': rsync_bin_key},
			haltOnFailure = False,
			logEnviron = False,
			locks = NetLockUl,
		))

	# logs
	if False:
		factory.addStep(ShellCommand(
			name = "upload",
			description = "Uploading logs",
			command=["../rsync.sh", "-4", "-info=name", "--delete", "--delay-updates", "--partial-dir=.~tmp~%s~%s" %(ts[0], ts[1]), "-az", "logs/", "%s/logs/%s/%s/" %(rsync_bin_url, ts[0], ts[1])],
			env={'RSYNC_PASSWORD': rsync_bin_key},
			haltOnFailure = False,
			alwaysRun = True,
			logEnviron = False,
			locks = NetLockUl,
		))

	factory.addStep(ShellCommand(
		name = "df",
		description = "Reporting disk usage",
		command=["df", "-h", "."],
		env={'LC_ALL': 'C'},
		haltOnFailure = False,
		alwaysRun = True
	))

	from buildbot.config import BuilderConfig

	c['builders'].append(BuilderConfig(name=target, slavenames=slaveNames, factory=factory, nextBuild=GetNextBuild))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

if ini.has_option("status", "bind"):
	if ini.has_option("status", "user") and ini.has_option("status", "password"):
		authz_cfg=authz.Authz(
			# change any of these to True to enable; see the manual for more
			# options
			auth=auth.BasicAuth([(ini.get("status", "user"), ini.get("status", "password"))]),
			gracefulShutdown = 'auth',
			forceBuild = 'auth', # use this to test your slave once it is set up
			forceAllBuilds = 'auth',
			pingBuilder = False,
			stopBuild = 'auth',
			stopAllBuilds = 'auth',
			cancelPendingBuild = 'auth',
		)
		c['status'].append(html.WebStatus(http_port=ini.get("status", "bind"), authz=authz_cfg))
	else:
		c['status'].append(html.WebStatus(http_port=ini.get("status", "bind")))


from buildbot.status import words

if ini.has_option("irc", "host") and ini.has_option("irc", "nickname") and ini.has_option("irc", "channel"):
	irc_host = ini.get("irc", "host")
	irc_port = 6667
	irc_chan = ini.get("irc", "channel")
	irc_nick = ini.get("irc", "nickname")
	irc_pass = None

	if ini.has_option("irc", "port"):
		irc_port = ini.getint("irc", "port")

	if ini.has_option("irc", "password"):
		irc_pass = ini.get("irc", "password")

	irc = words.IRC(irc_host, irc_nick, port = irc_port, password = irc_pass,
			channels = [{ "channel": irc_chan }],
			notify_events = {
			  'exception': 1,
			  'successToFailure': 1,
			  'failureToSuccess': 1
			}
	)

	c['status'].append(irc)

####### DB URL

c['db'] = {
	# This specifies what database buildbot uses to store its state.  You can leave
	# this at its default for all but the largest installations.
	'db_url' : "sqlite:///state.sqlite",
}
